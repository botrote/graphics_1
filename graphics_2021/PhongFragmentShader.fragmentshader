#version 330 core

in vec3 fN;
in vec3 fL;
in vec3 fE;
in vec3 fL2;
in vec2 UV;

out vec4 fColor;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform mat4 ModelView;
uniform vec4 LightPosition;
uniform vec4 LightPosition2;
uniform float Attenuation;
uniform float Shininess;
uniform int Mode;

uniform bool isTexturedFrag;
uniform sampler2D myTextureSampler;

void main()
{
	// Normalize the input lighting vectors
	vec3 N = normalize(fN);
	vec3 E = normalize(fE);
	vec3 L = normalize(fL);
	vec3 L2 = normalize(fL2);
	vec3 H = normalize( L + E );
	vec3 H2 = normalize( L2 + E );

	vec4 ambient = AmbientProduct;

	float Kd = max(dot(L, N), 0.0);
	vec4 diffuse = Attenuation * Kd*DiffuseProduct;

	float Ks = pow(max(dot(N, H), 0.0), 10);
	vec4 specular = 10 * Attenuation * Ks*SpecularProduct;
	
	// discard the specular highlight if the light¡¯s behind the vertex
	if( dot(L, N) >= 0.0 ) {
		specular = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	vec4 fColor1 = ambient + diffuse + specular;
	fColor1.a = 1.0;


	// directional light
	float Kd2 = max(dot(L2, N), 0.0);
	vec4 diffuse2 = Kd2*DiffuseProduct;

	float Ks2 = pow(max(dot(N, H2), 0.0), Shininess);
	vec4 specular2 = Ks2*SpecularProduct;
	
	// discard the specular highlight if the light¡¯s behind the vertex
	if( dot(L2, N) > 0.0 ) {
		specular2 = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	float Kd3 = max(dot(L2, N), 0.0);
	vec4 diffuse3 = Kd3*DiffuseProduct;

	float Ks3 = pow(max(dot(N, H2), 0.0), 10);
	vec4 specular3 = Ks3*SpecularProduct;
	
	// discard the specular highlight if the light¡¯s behind the vertex
	if( dot(L2, N) < 0.0 ) {
		specular3 = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	vec4 fColor3 = ambient + diffuse3 + specular3;
	fColor3.a = 1.0;

	if (Mode==1)
		fColor = fColor1 + fColor3;
	else
		fColor = ambient + diffuse2 + specular2;
	fColor.a = 1.0;

	if(isTexturedFrag)
		fColor = fColor * texture( myTextureSampler, UV );
}